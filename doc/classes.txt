1 capplication (application.h/application.cpp)
2 clinked_list (linked_list.h)
3 cnode (linked_list.h)
4 cmenu (menu.h)
5 imenu_entry (menu.h)
6 cmenu_entry (menu.h)
7 croom (room.h/room.cpp)


====================

1 capplication

Provides a simple menu to create, edit and delete rooms.
When editing a room, you have the option to make reservations etc. 

1.1 variables

1.1.1 private

m_running
        type int, if false application.run() ends the program

m_return_to_main_menu
        type int, if true, application.edit_room() returns to the
        main menu

m_main_menu
        type cmenu, the main menu of the program

m_rooms
        type clinked_list<croom*>, a linked list, that contains
        all rooms


1.2 functions

1.2.1 public

capplication()
        - sets m_running TRUE (necessary for end of instance)
        - sets m_return_to_mainmenu TRUE (the default state)
        - creates the menu entries

run()
        - runs infinite loop for displaying and selecting in menu

list_rooms()
        - lists all the rooms that are available

add_room()
        - creates a new room

delete_room()
        - deletes a room

edit_room()
        - creates a menu of for a specific room with the options to
          reserve tickets etc.
        - sets m_return_to_main_menu FALSE
        - runs infinite loop for displaying and selecting in menu

return_to_main_menu()
        - sets m_return_to_main_menu TRUE

end_program()
        - Asks for confirmation
        - if successful: sets m_running FALSE

====================

2 clinked_list

Template for a linked list with content of type <T>
There's some special behaviour within delete_node() and insert_node()
(see there)

2.1 variables

2.1.1 private

*m_pfirst
*m_plast
        - pointer to the first/last node within the chain

m_length
        - type unsigned int, current length of chain


2.2 functions

2.2.1 public

clinked_list()
        - initializes variables as "0"

clinked_list(unsigned int length)
        - creates a list of length "length"
        - initializes m_pfirst and m_plast as first and last node

~clinked_list()
        - deletes each node separately

append_node()
        - appends a new node to the end of the list
        - refreshes m_pfirst (if the appended node is the only node),
          m_plast (is the appended node), and length (+=1)

insert_node(unsigned int pos)
        - inserts a node at the position <pos>
        - if <pos> is not within the list, appends a node
        - refreshes m_pfirst/m_plast and m_length

delete_node(unsigned int pos)
        - deletes a node at position <pos>
        - if there is no element at position <pos>, does nothing (!)
        - otherwise, refreshes m_pfirst/m_plast and m_length

*first()
*last()
        - return the first/last element in the list
        - throw a std::out_of_range exception, if the element
          does not exist

length()
        - returns an unsigned int with the current length (m_length)


2.3 operators

[] (unsigned int n)
        - returns the <n>-th element in the list
        - throw a std::out_of_range exception, if the element
          does not exist

====================

3 cnode

Specifies nodes within the linked list (and is therefore defined in
linked_list.h) and content of type <T>.
cnode has clinked_list as a friend, so clinked_list can write to
private members of cnode (see source)

3.1 variables

3.1.1 public

m_content
        - type <T>, usually contains an object

3.1.2 private

*m_pnext
        - contains the address of the next node in the list


3.2 functions

3.2.1 public

cnode()
        - initializes pointer m_pnext as 0
~cnode()
        - currently: nothing (is virtual so it is possible to derive
          from cnode)
*next()
        - returns address of next node

====================

4 cmenu

4.1 variables

4.1.1 protected

m_entries
        - type linked_list<imenu_entry*>


4.2 functions

4.2.1 public

~cmenu()
        - deletes all menu entries

add_entry(imenue_entry *entry)
        - appends a menu entry(of type imenu_entry) to m_entries 

display()
select()
        - see 4.2.2 do_display()/do_selected()

4.2.2 protected

do_display()
        - prints all available menu entries and the index by which
          they are reachable

do_select()
        - handles choice-input
        - calls the function corresponding to the selected menu entry

====================

5 imenu_entry

from file menu.h
Interface for menu entries - declares the mandatory functions for
menu entries

5.1 functions

All protected functions are true virtual functions.

5.1.1 public

~imenue_entry
        - does nothing (is virtual so you can derive from imenu_entry)

action()
        - calls do_action() from scope protected

get_name()
        - returns do_get_name() from scope protected


5.1.2 protected

do_action()
do_get_name()

====================

6 cmenu_entry

from file menu.h
Inherits public from imenu_entry

6.1 variables

6.1.1 private

T *m_pobject
        - Pointer to type T
        - used for reference to action of specific menu entry

string m_name
       - Name of the menu entry


6.2 functions

6.2.1 public

cmenu_entry(T *pobject, void (T::*pmethod)(), string name)
       - uses an initialisation list to initialize a new cmenue_entry
         with references to object, name and method

6.2.2 private

(T::*m_pmethod)();
        - function pointer to a function from an object of type T

6.2.3 protected

do_action()
        - calls function p_method from the object m_pobject

do_name()
        - returns the name of the menu entry (m_name)

====================

7. croom

7.1 variables

7.1.1 private

m_rows
m_lines
        - the number of rows and lines the current room has or should
          have

**m_ppseats
        - 2-dimensional array of seats (which is a mapping of the real
          room)

m_name
        - the name of the room

7.2 functions

7.2.1 public

croom()
croom(unsigned int rows, unsigned int lines, string name)
        - creates a room with <rows> rows and <lines> lines and the
          name <name>
        - creats the 2-dimensional array of the seats
        - the constructor without parameters will ask for the specific
          values

~croom()
        - deletes the seats

print_room()
        - prints a semi-graphical map of the room
        - there are two versions of the colourized output:
          one for POSIX (within the #ifndef _WIN32 statement),
          and for for windows

lock()
        - locks a seat

unlock()
        - unlocks a seat

reserve()
        - reserves a seat

release()
        - cancels a reservation

handout()
        - sells a ticket or hands out a reserved ticket

cancel()
        - cancels already sold tickets

7.2.2 private

seat_input(unsigned int&, unsigned int&)
        - does user input for functions lock() - cancel()

====================

8 seat

8.1 necessary definition and information

- There is an enum seat_state that provides the value FREE, RESERVED,
  HANDED and LOCKED
- Important: We check whether an option is allowed!
  The states in which you can perform an action are:
  lock(): each
  unlock(): LOCKED
  reserve(): FREE
  release(): RESERVED
  handout(): FREE, RESERVED (later with check)
  cancel(): LOCKED (Does almost the same as release(), but with
            another verification

8.2 variables

8.2.1 public

m_name
        - type string, the name for whom the seat is reserved
          (if it is)

8.2.2 private

m_state
        - type seat_state, the current state of the seat

8.3 functions

8.3.1 public

cseat()
        - creates a new seat
        - new seats have no name connected to them, and are free

state()
        - getter function for the seat state

lock()
unlock()
reserve()
release(uint,uint)
handout(uint,uint)
cancel(uint,uint)
        - change the state of the seat (m_state) and do additional
          verification
